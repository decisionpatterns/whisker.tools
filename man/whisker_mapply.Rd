% Generated by roxygen2 (4.1.0.9001): do not edit by hand
% Please edit documentation in R/whisker_mapply.R
\name{whisker_mapply}
\alias{whisker_mapply}
\title{whisker_mapply - repeatedly render a template over multiple arguments}
\usage{
whisker_mapply(template, data = parent.frame(), partials = list(), ...)
}
\arguments{
\item{template}{character}

\item{data}{named list or environment with variables that will be used
during rendering but do not change in each}

\item{partials}{See \code{\link[whisker]{whisker.render}}}

\item{...}{named list of object that get substituted

\code{whisker_mapply} supports a mapply type interface over \code{whisker.render}
that allows for vector of template renderings.

The advantage of this approach are several-fold:
- more reusablity of the template
- cleaner syntax
- no need to be changing out data
- less looping
- template rendered as a vector}
}
\value{
character vector of rendered templates
}
\description{
Have a mixture of changing and unchanging template elements.
}
\examples{
template <- 'type {{type}}: {{uppercase}},{{lowercase}}'
  whisker_mapply( template, list(type="alphabet"), lowercase=letters[1:3], uppercase=LETTERS[1:3] )

  # USED IN LOOP ...
  #  template is pre-defined at top of code (above) and is not changes,
  #   nor is it required to modify data. This is handled seemlessly.
  \dontrun{
  # for( type in 1:2 ) {
  #   print( whisker_mapply( template, list(type=type, uppercase="A"), lowercase=letters[1:3] ) )
  # }
  # }
}
\seealso{
\code{\link{whisker.render}}
}

